/*****************************************************************************/
/** 
* \file       sky_time.h
* \author     yangkun
* \date       2015/07/06
* \version    V1.0
* \brief      系统时间相关函数
* \note       Copyright (c) 2000-2020  金龙客车制造有限公司
* \remarks    输入修改日志
******************************************************************************/
#ifndef _SKY_TIME_H_
#define _SKY_TIME_H_

/********************************************************************************
 *                               头文件引用                                     *
 ********************************************************************************/
#include "macro_def.h"

#ifdef __cplusplus
extern "C"
{
#endif

/********************************************************************************
 *                               常量定义                                       *
 ********************************************************************************/
#if CODE_PART("常量定义")
#define TIME_STR_LEN    (32)     /* 当前时间字符串长度 */
#define TIME_SLICE      (100)    /* 默认分时处理时间片(ms) */
#endif

/********************************************************************************
 *                               宏定义                                         *
 ********************************************************************************/
#if CODE_PART("宏定义")
/* 分时处理判断宏:
用法如下:
WORD32 cos_xxx_func(VOID)
{
    WORD32 rtn = RTN_SUCCESS;
    COS_TIME_SHARE_VAR;

    分时开始(函数起始处调用)
    COS_TIME_SHARE_START;

    业务处理1;

    for(...)
    {
        分时(循环中判断)
        if(COS_TIME_SHARE_REACH(0))
        {
            由于每次判断都会获取系统当前时间,所以在用gdb调试时,
            可以把g_ts_switch赋为FALSE关闭分时判断
            rtn = RTN_NEED_TS;
            goto EXIT;
        }

        业务处理2;
    }

    业务处理3;

EXIT:
    if(RTN_NEED_TS == rtn)
    {
        开启分时定时器,或者等待分时定时器下次超时继续处理
    }

    return rtn;
}
*/
/* 定义分时局部变量 */
#define TIME_SHARE_VAR    WORD64 __cos_time_ts = 0
/* 记录开始时间 */
#define TIME_SHARE_START    \
do    \
{    \
    (__time_ts) = time_poweron_ms();    \
}while(0)
/* 分时超时判断(time_slice为0时,采用默认分时时间片COS_TIME_SLICE) */
#define CTIME_SHARE_REACH(time_slice)    \
    ((g_ts_switch) ?    \
     (time_poweron_ms() >= (__time_ts) + ((time_slice) ? (time_slice) : TIME_SLICE)) :    \
     FALSE)
#endif

/********************************************************************************
 *                               全局数据类型定义                               *
 ********************************************************************************/
#if CODE_PART("全局数据类型定义")

#endif

/********************************************************************************
 *                               全局变量声明                                   *
 ********************************************************************************/
#if CODE_PART("全局变量声明")
extern BOOL g_ts_switch;
#endif

/********************************************************************************
 *                               全局函数声明                                   *
 ********************************************************************************/
#if CODE_PART("全局函数声明")
/*****************************************************************************/
/** 
* \author      yangkun
* \date        2015/10/15
* \brief       时间转换字符串
* \param[in]   time_ms     时间(精度:毫秒)
* \param[out]  time_str    时间字符串
* \return      VOID
* \ingroup     sky_time
* \remarks     格式: 2015/09/08 15:52:21.356
******************************************************************************/
VOID time_to_str_ms(WORD64 time_ms, CHAR time_str[TIME_STR_LEN]);

/*****************************************************************************/
/** 
* \author      yangkun
* \date        2015/10/15
* \brief       时间转换字符串
* \param[in]   time_s      时间(精度:秒)
* \param[out]  time_str    时间字符串
* \return      VOID
* \ingroup     sky_time
* \remarks     格式: 2015/09/08 15:52:21
******************************************************************************/
VOID time_to_str_s(WORD32 time_s, CHAR time_str[TIME_STR_LEN]);

/*****************************************************************************/
/** 
* \author      yangkun
* \date        2015/07/06
* \brief       获取系统当前时间
* \return      当前时间(精度:微秒)
* \ingroup     sky_time
* \remarks     其它信息
******************************************************************************/
WORD64 time_current_us();

/*****************************************************************************/
/** 
* \author      yangkun
* \date        2015/07/06
* \brief       获取系统当前时间
* \return      当前时间(精度:毫秒)
* \ingroup     sky_time
* \remarks     其它信息
******************************************************************************/
WORD64 time_current_ms();

/*****************************************************************************/
/** 
* \author      yangkun
* \date        2015/07/06
* \brief       获取系统当前时间
* \return      当前时间(精度:秒)
* \ingroup     sky_time
* \remarks     其它信息
******************************************************************************/
WORD32 time_current_s();

/*****************************************************************************/
/** 
* \author      yangkun
* \date        2015/09/08
* \brief       获取系统当前时间字符串
* \param[out]  time_str    系统当前时间字符串
* \return      VOID
* \ingroup     sky_time
* \remarks     格式: 2015/09/08 15:52:21.356
******************************************************************************/
VOID time_current_str(CHAR time_str[TIME_STR_LEN]);

/*****************************************************************************/
/** 
* \author      yangkun
* \date        2016/01/21
* \brief       获取系统上电时间
* \return      上电时间(精度:纳秒)
* \ingroup     sky_time
* \remarks     其它信息
******************************************************************************/
WORD64 time_poweron_ns();

/*****************************************************************************/
/** 
* \author      yangkun
* \date        2015/09/14
* \brief       获取系统上电时间
* \return      上电时间(精度:微秒)
* \ingroup     sky_time
* \remarks     其它信息
******************************************************************************/
WORD64 time_poweron_us();

/*****************************************************************************/
/** 
* \author      yangkun
* \date        2015/09/14
* \brief       获取系统上电时间
* \return      上电时间(精度:毫秒)
* \ingroup     sky_time
* \remarks     其它信息
******************************************************************************/
WORD64 time_poweron_ms();

/*****************************************************************************/
/** 
* \author      yangkun
* \date        2015/09/14
* \brief       获取系统上电时间
* \return      上电时间(精度:秒)
* \ingroup     sky_time
* \remarks     其它信息
******************************************************************************/
WORD32 time_poweron_s();

/*****************************************************************************/
/** 
* \author      yangkun
* \date        2016/04/20
* \brief       设置系统时间
* \param[in]   time_str    待设置的时间字符串
* \return      参见cos_return_code.h
* \ingroup     sky_time
* \remarks     格式: 2015-09-08 15:52:21
******************************************************************************/
WORD32 time_set(const CHAR time_str[TIME_STR_LEN]);
#endif

#ifdef __cplusplus
}
#endif
#endif

